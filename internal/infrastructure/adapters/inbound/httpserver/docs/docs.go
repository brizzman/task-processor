// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/tasks/batch-create": {
            "post": {
                "description": "Creates multiple tasks in a single operation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Batch create tasks",
                "parameters": [
                    {
                        "description": "Tasks to create",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchCreateTasksRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BatchCreateTasksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/process": {
            "post": {
                "description": "Acquires and processes tasks with configurable parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Process multiple tasks",
                "parameters": [
                    {
                        "description": "Processing parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProcessTasksRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProcessTasksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Returns 200 OK if the service is alive, 503 if shutting down",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness check",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "shutting down",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Returns 200 OK if ready, 503 if shutting down or not ready",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "ready",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "503": {
                        "description": "shutting down / not ready",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BatchCreateTasksRequest": {
            "description": "Request payload for batch task creation",
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "description": "@Description Number of tasks to create\n@Example     5",
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 1
                }
            }
        },
        "dto.BatchCreateTasksResponse": {
            "description": "Response payload for batch task creation",
            "type": "object",
            "properties": {
                "ids": {
                    "description": "@Description List of created task IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.ProcessTasksRequest": {
            "description": "Request payload for task processing",
            "type": "object",
            "required": [
                "limit",
                "success_rate"
            ],
            "properties": {
                "limit": {
                    "description": "@Description Number of tasks to process (1-50)\n@Example     10",
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 1
                },
                "max_delay_ms": {
                    "description": "@Description Maximum processing delay in milliseconds\n@Example     500",
                    "type": "integer",
                    "minimum": 0
                },
                "min_delay_ms": {
                    "description": "@Description Minimum processing delay in milliseconds\n@Example     100",
                    "type": "integer",
                    "minimum": 0
                },
                "success_rate": {
                    "description": "@Description Success rate probability (0.0 - 1.0)\n@Example     0.8",
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                }
            }
        },
        "dto.ProcessTasksResponse": {
            "description": "Response after task processing",
            "type": "object",
            "properties": {
                "failed_count": {
                    "description": "@Description Number of failed tasks\n@Example     2",
                    "type": "integer"
                },
                "processed_count": {
                    "description": "@Description Total number of tasks processed\n@Example     10",
                    "type": "integer"
                },
                "success_count": {
                    "description": "@Description Number of successfully processed tasks\n@Example     8",
                    "type": "integer"
                }
            }
        },
        "utils.HTTPResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
